/*
 The MIT License (MIT)

 Copyright (c) 2014 Ruben Kleiman

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// CLIENT (SOME SHARED WITH SERVER) --------------------------------------------------------------------------------

'use strict';

// TODO Clean up so we don't pollute globals; also isolate and eliminate objs not needed by server

/* shallowCopyObj: a simple shallow copy of the object (no inheritance) */
function shallowCopyObj(obj) {
    var copy = {};
    for (var prop in obj) {
        copy[prop] = obj[prop];
    }
    return copy;
}
function objectOverrides(obj, overrides) {
    for (var name in overrides) {
        obj[name] = overrides[name];
    }
    return obj;
}
function makeRequired(obj) {
    var copy = shallowCopyObj(obj);
    if (copy.description) {
        copy.description = 'Required field. ' + copy.description;
    }
    return objectOverrides(copy, {required: true});
}

function getCodes(obj) {
    var i, codes = {};
    for (i in obj) {
        var code = obj[i][0];
        codes[code] = code;
    }
    return codes;
}

// langs: language dropdown (TODO should come from server)
var langs = [
    ['zh', 'Chinese (zh)'],
    ['en', 'English (en)'],
    ['es', 'Spanish (es)'],
    ['fr', 'French (fr)'],
    ['grc', 'Ancient Greek (grc)'],
    ['de', 'German (de)'],
    ['la', 'Latin (la)'],
    ['ru', 'Russian (ru)']
];
langs.codes = getCodes(langs);

// workTypes: work type dropdown (TODO should come from server)
var workTypes = [
    ['WebSite', 'Web Site'],
    ['WebPage', 'Web Page'],
    ['BookPoems', 'Book of Poems'],
    ['Poem', 'Poem'],
    ['BookNovel', 'Novel (Book)'],
    ['BookNonFiction', 'Non-Fiction (Book)'],
    ['BookShortStories', 'Short Stories (Book)'],
    ['ShortStory', 'Short Story'],
    ['JournalArticle', 'Article (Journal)'],
    ['MagazineArticle', 'Article (Magazine)'],
    ['Unknown', 'Other (Unknown Corpus)']
];
workTypes.codes = getCodes(workTypes);

/**
 * catalogFieldSpecs: Presentation specs for each catalog field
 * id := the id of the field
 * name := displayable name
 * type := {text | input | select | typeahead} to present in a textarea or drop-down menu, respectively
 *     text := presented as a textarea, input := presented as an input, select := presented as a menu, typeahead := presented as a typeahead
 * require := {true | false}
 * options := collection of options (used by select type)
 * validator := the validation method
 * xformer := the object transformer := {set | push | construct}, where
 *    set := sets the server-side value with the client's value without transformation
 *    push := pushes the client's value into a server-side array
 *    construct := builds a server-side object with the client's value. The key for the constructed
 *                 server-side object is the toId (see publisher as an example), and the key
 *                 for the client-side value is the subId if it is defined, else the id itself.
 *    When transforming an object, the server-side property is the same id.
 * min := the minimum length (string) or value (number) of the object
 * max := the maximum length or value of the object
 * toId := an alternate id to use server-side; if not provided, then defaults to the id field
 * subId := the id of the value in an object (server-side); if not provided, then defaults to the toId
 *
 * TODO get these from server (autogenerated from various sources--e.g., ISO languages) or just generate into this file
 */

var catalogFieldSpecs = { // TODO incorporate the value type (string/number/choice) and constraints (min/max size, etc)
    workType: {id: 'workType', required: true, name: 'Work Type', type: 'select', options: workTypes, validator: 'string', xformer: 'set'}, // always required
    id: {id: '_id', name: 'Identifier', type: 'input', description: 'Unique identifier for the catalog item', min: 36, max: 36, validator: 'string', xformer: 'set'},
    title: {id: 'title', name: 'Title', type: 'text', min: 1, description: "The work's original title", validator: 'string', xformer: 'set'},
    lang: {id: 'lang', name: 'Language', type: 'select', options: langs, min: 2, max: 8, description: 'The main language in which the work for this catalog item is written', validator: 'string', xformer: 'set'},
    authors: {id: 'authors', subId: 'fullName', subIdName: 'Name', name: 'Author(s)', type: 'text', description: 'A list of the original author(s) of this work', validator: 'string', xformer: 'push'},
    editors: {id: 'editors', subId: 'fullName', subIdName: 'Name', name: 'Editor(s)', type: 'text', description: 'For anthologies and other collections, this is a list of the original editor(s) of this work.', validator: 'string', xformer: 'push'},
    edition: {id: 'edition', name: 'Edition', type: 'input', description: 'The edition of this work. This must be a number.', validator: 'integer', min: 1, max: 1000, xformer: 'set'}, // TODO a number wheel?
    publisherAddress: {id: 'publisherAddress', toId: 'publisher', 'subId': 'address', subIdName: 'Full Address', name: "Publisher Address", type: 'typeahead', description: "The address of this work's publisher", validator: 'string', xformer: 'construct'},
    publisherName: {id: 'publisherName', toId: 'publisher', 'subId': 'name', name: 'Publisher Name', type: 'input', min: 1, description: "The name of this work's publisher", xform: 'map', xformer: 'construct', validator: 'string'},
    publisherCity: {id: 'publisherCity', toId: 'publisher', 'subId': 'city', name: 'Publisher City', type: 'input', description: "The publisher's city", xform: 'map', xformer: 'construct', validator: 'string'},
    publisherProvince: {id: 'publisherProvince', toId: 'publisher', 'subId': 'province', name: 'Publisher Province', type: 'input', description: "The publisher's province or state", xform: 'map', xformer: 'construct', validator: 'string'},
    publisherCountry: {id: 'publisherCountry', toId: 'publisher', 'subId': 'country', name: 'Publisher Country', type: 'input', description: "The publisher's country", xform: 'map', xformer: 'construct', validator: 'string'},
    copyright: {id: 'copyright', name: 'Copyright', type: 'text', min: 8, description: "A copyright description", validator: 'string', xformer: 'set'},
    subjects: {id: 'subjects', subId: 'name', name: 'Subject(s)', type: 'text', description: "Subjects areas pertaining to this work", validator: 'string', xformer: 'push'},
    pageUrl: {id: 'pageUrl', name: 'Page URL', type: 'input', placeholder: 'http://', min: 10, description: "The URL to the page cited by this catalog item", validator: 'url', xformer: 'set'},
    websiteUrl: {id: 'websiteUrl', name: 'Website URL', type: 'input', placeholder: 'http://', min: 10, description: "The URL to the home page cited by this catalog item", validator: 'url', xformer: 'set'}
};

/**
 * catalogFieldSubSpecs: these are further specs for each subId and toId field appearing in the catalogFieldSpecs.
 * The key is the subId (or toId) and the value is an object with the spec for the subId or toId.
 * name := the displayable name for the subId or toId
 */
var catalogFieldSubSpecs = {
    fullName: {name: 'Name'},
    publisher: {name: 'Publisher'},
    name: {name: 'Name'},
    city: {name: 'City'},
    province: {name: 'Province'},
    country: {name: 'Country'},
    address: {name: 'Address'}
};

/** workTypeCatalogFieldSpecs: Each work type's set of field specs ordered for presentation. */
var workTypeCatalogFieldSpecs = {
    BookPoems: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    WebSite: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.lang),
        makeRequired(catalogFieldSpecs.websiteUrl),
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    WebPage: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.lang),
        makeRequired(catalogFieldSpecs.pageUrl),
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    Poem: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookNovel: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookNonFiction: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookShortStories: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    ShortStory: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    JournalArticle: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    Unknown: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherAddress ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountry ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ]
};

/* client: groups all metadata client with nodejs server */
var client = {

    /* workTypeOptions: client uses this for work type menu */
    workTypeOptions: catalogFieldSpecs.workType.options,

    /* shared: data shared between server and client. TODO this is a stub. Should come from server DB */
    shared: {

        /**
         * definitions: Shared between server and client.
         */
        definitions: {

            /*
             * Collections used for validation, etc.
             * Key: the field id, value: the collection of possible values for the field.
             */
            collections: {
                /* Supported bcp47 language codes */
                lang: langs.codes
            },

            workType: workTypes,

            /* The content formats for CatalogOptions.contentFormat */
            contentFormatRaw: 'raw',
            contentFormatCanonical: 'canonical'
        },

        /**
         * workTypeCatalogFieldInfo: some info may appear client-specific (e.g., placeholder)
         * but can be conceived of as a constraint (e.g., placeholder := a default value).
         */
        workTypeCatalogFieldInfo: workTypeCatalogFieldSpecs,

        catalogFieldSpecs: catalogFieldSpecs,

        catalogFieldSubSpecs: catalogFieldSubSpecs,

        /**
         * makeClientCatalog: creates a client catalog based on the work type.
         * @param workType  The work type
         * @return {*} A client catalog for the specified work type
         */
        makeClientCatalog: function (workType) {
            var cat = {};
            var specs = workTypeCatalogFieldSpecs[workType];
            if (typeof specs === 'undefined') {
                throw {type: 'fatal', msg: 'Missing specs for work type ' + workType};
            }
            for (var i in specs) {
                var spec = specs[i];
                cat[spec.id] = undefined;
            }
            return cat;
        }
    }
};

if ('undefined' === typeof horaceApp) {
    exports.shared = client.shared; // export to nodejs
}