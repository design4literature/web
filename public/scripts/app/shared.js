/*
 The MIT License (MIT)

 Copyright (c) 2014 Ruben Kleiman

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// CLIENT (SOME SHARED WITH SERVER) --------------------------------------------------------------------------------

'use strict';

// TODO Clean up so we don't pollute globals; also isolate and eliminate objs not needed by server

/* shallowCopyObj: a simple shallow copy of the object (no inheritance) */
function shallowCopyObj(obj) {
    var copy = {};
    for (var prop in obj) {
        copy[prop] = obj[prop];
    }
    return copy;
}
function objectOverrides(obj, overrides) {
    for (var name in overrides) {
        obj[name] = overrides[name];
    }
    return obj;
}
function makeRequired(obj) {
    var copy = shallowCopyObj(obj);
    return objectOverrides(copy, {required: true});
}

var langs = [
    ['grc', 'Ancient Greek (grc)'],
    ['en', 'English (en)'],
    ['la', 'Latin (la)']
];
langs.codes = function () {
    var i, codes = {};
    for (i in this) {
        var code = this[i][0];
        codes[code] = code;
    }
    return codes;
};

var workTypes = [
    ['WebSite', 'Web Site'],
    ['WebPage', 'Web Page'],
    ['BookPoems', 'Book of Poems'],
    ['Poem', 'Poem'],
    ['BookNovel', 'Novel (Book)'],
    ['BookNonFiction', 'Non-Fiction (Book)'],
    ['BookShortStories', 'Short Stories (Book)'],
    ['ShortStory', 'Short Story'],
    ['JournalArticle', 'Article (Journal)'],
    ['MagazineArticle', 'Article (Magazine)'],
    ['Unknown', 'Other (Unknown Corpus)']
];
workTypes.codes = langs.codes;

/**
 * catalogFieldSpecs: Presentation specs for each catalog field
 * id := the id of the field
 * name := displayable name
 * type := {text | select} to present in a textarea or drop-down menu, respectively
 * require := {true | false}
 * TODO get these from server (autogenerated from various sources--e.g., ISO languages) or just generate into this file
 */
var catalogFieldSpecs = { // TODO incorporate the value type (string/number/choice) and constraints (min/max size, etc)
    workType: {id: 'workType', required: true, name: 'Work Type', type: 'select', options: workTypes}, // always required
    id: {id: 'id', name: 'Identifier', type: 'input', minLength: 8},
    title: {id: 'title', name: 'Title', type: 'text', minLength: 1},
    lang: {id: 'lang', name: 'Language', type: 'select', options: langs, minLength: 2},
    authors: {id: 'authors', name: 'Author(s)', type: 'text'},
    editors: {id: 'editors', name: 'Editor(s)', type: 'text'},
    edition: {id: 'edition', name: 'Edition', type: 'input'}, // TODO a number wheel?
    publisherName: {id: 'publisherName', name: 'Publisher', type: 'input', minLength: 1},
    publisherCity: {id: 'publisherCity', name: 'Publisher City', type: 'input'},
    publisherProvince: {id: 'publisherProvince', name: 'Publisher Province', type: 'input'},
    publisherCountryISO: {id: 'publisherCountryISO', name: 'Publisher Country', type: 'input'},
    copyright: {id: 'copyright', name: 'Copyright', type: 'text', minLength: 8},
    subjects: {id: 'subjects', name: 'Subject(s)', type: 'text'}, // TODO some kind of keyword widget?
    pageUrl: {id: 'pageUrl', name: 'Page URL', type: 'input', placeholder: 'http://', minLength: 10},
    websiteUrl: {id: 'websiteUrl', name: 'Website URL', type: 'input', placeholder: 'http://', minLength: 10} // TODO add placeholders for text/input fields
};

var workTypeCatalogFieldSpecs = {
    BookPoems: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    WebSite: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.lang),
        makeRequired(catalogFieldSpecs.websiteUrl),
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    WebPage: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.lang),
        makeRequired(catalogFieldSpecs.pageUrl),
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    Poem: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookNovel: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookNonFiction: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    BookShortStories: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    ShortStory: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    JournalArticle: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ],
    Unknown: [
        catalogFieldSpecs.id,
        makeRequired(catalogFieldSpecs.title),
        makeRequired(catalogFieldSpecs.lang),
        catalogFieldSpecs.authors ,
        catalogFieldSpecs.editors ,
        catalogFieldSpecs.edition ,
        catalogFieldSpecs.publisherName ,
        catalogFieldSpecs.publisherCity ,
        catalogFieldSpecs.publisherProvince ,
        catalogFieldSpecs.publisherCountryISO ,
        catalogFieldSpecs.copyright ,
        catalogFieldSpecs.subjects,
        catalogFieldSpecs.workType
    ]
};

/* client: groups all metadata client with nodejs server */
var client = {

    /* workTypeOptions: client uses this for work type menu */
    workTypeOptions: catalogFieldSpecs.workType.options,

    /* shared: data shared between server and client. TODO this is a stub. Should come from server DB */
    shared: {

        /**
         * definitions: Shared between server and client.
         */
        definitions: {

            // TODO consolidate languages into one descriptor
            // TODO move this into a service so that data can be (more) dynamically fetched from server and there won't be a need to shared this file

            /* Supported bcp47 language codes */
            lang: langs.codes(langs),

            workType: workTypes.codes(),

            /* The content formats for CatalogOptions.contentFormat */
            contentFormatRaw: 'raw',
            contentFormatCanonical: 'canonical'
        },

        /**
         * workTypeCatalogFieldInfo: some info may appear client-specific (e.g., placeholder)
         * but can be conceived of as a constraint (e.g., placeholder := a default value).
         */
        workTypeCatalogFieldInfo: workTypeCatalogFieldSpecs,

        /**
         * makeClientCatalog: creates a client catalog based on the work type.
         * @param workType  The work type
         * @return {*} A client catalog for the specified work type
         */
        makeClientCatalog: function(workType) {
            var cat = {};
            var specs = workTypeCatalogFieldSpecs[workType];
            if (typeof specs === 'undefined') {
                throw {type: 'fatal', msg: 'Missing specs for work type ' + workType};
            }
            for (var i in specs) {
                var spec = specs[i];
                cat[spec.id] = undefined;
            }
            return cat;
        }
    }
};

if ('undefined' === typeof horaceApp) {
    exports.shared = client.shared; // export to nodejs
}